package supersql.common;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.util.*;

public class GlobalEnv {


	static Hashtable envs;

	//設定ファイルの情報
	static String host;

	static String db;

	static String user;

	static String home;

	static String outdir;

	static String url;

	static String password;

	static String encode;

	//chie start
	static String driver;

	static String optimizer;

	static String invokeServletPath; //used by online

	static String fileDirectory; //used by online

	static int tupleNum;

	//chie end

	//swf用
	public static String table_name;
	public static String where_line;

	//foreach用
	public static boolean foreach_flag;

	//added by ria 20110704 start
	static boolean optimizable = true;
	//added by ria 20110704 end

	//tk embed用
	public static StringBuffer err = new StringBuffer();
	public static int online_flag = 0;
	public static int err_flag = 0;
	public static int EmbedbyQuery = 0;
	static String embedtmp;
	static ArrayList EmbedFile = new ArrayList(100);
	//static String driver = "org.postgresql.Driver";

	//for next/prev page
	public static int startnum = 0;
	public static int endnum = 0;

	public static void setGlobalEnv(String[] args) {
		err_flag = 0;
		err = new StringBuffer();
		envs = new Hashtable();
		String key = null;

		for (int i = 0; i < args.length; i++) {
			if (args[i].startsWith("-")) {
				if (key != null) {
					envs.put(key, "");
				}
				key = args[i];
			} else {
				envs.put(key, args[i]);
				key = null;
			}
		}
		if (key != null) {
			envs.put(key, "");
		}

		setQuietLog();
		getConfig();
		Log.out("GlobalEnv is " + envs);
	}

	//tk
	public static void setGlobalEnvEmbed(String[] args) {

		envs = new Hashtable();
		String key = null;

		for (int i = 0; i < args.length; i++) {
			Log.out("args:"+args[i]);
			if (args[i].startsWith("-")) {
				if (key != null) {
					envs.put(key, "");
				}
				key = args[i];
			} else {
				envs.put(key, args[i]);
				key = null;
			}
		}
		if (key != null) {
			envs.put(key, "");
		}

		setQuietLog();
		Log.out("GlobalEnv is " + envs);
	}
	//end tk
	public static void getConfig() {
		host = null;
		db = null;
		user = System.getProperty("user.name");
		home = System.getProperty("user.home");
		outdir = null;
		driver = null;
		password = null;
		encode = null;
		optimizer = null;
		String config = getconfigfile();
		String[] c_value;

		//tk
		if (config == null) {
			config = home.concat("/.ssql");
			Log.out("offline config");
			c_value = getConfigValue(config);
		}
		else {
			Log.out("[GlobalEnv:getConfig] config file =" + config);

			if(config.contains("http"))
			{
				Log.out("online config");
				c_value = getConfigValue2(config);
			}
			else
			{
				Log.out("offline config");
				c_value = getConfigValue(config);
			}
		}
		//tk


		if (c_value[0] == null && c_value[1] == null && c_value[2] == null
				&& c_value[3] == null) {
			     Log.out("No config file("+config+")!!");
			return;
		}
		try {
			if (c_value[0] != null) {
				host = c_value[0];
			}
			if (c_value[1] != null) {
				db = c_value[1];
			}
			if (c_value[2] != null) {
				user = c_value[2];
			}
			if (c_value[3] != null) {
				outdir = c_value[3];
			}
			if (c_value[4] != null){
				embedtmp = c_value[4];
			}
			//chie
			if (c_value[5] != null){
				driver = c_value[5];
			}
			//chie
			if (c_value[6] != null){
				password = c_value[6];
			}
			if (c_value[7] != null){
				encode = c_value[7];
			}
			if (c_value[8] != null){
				optimizer = c_value[6];
			}
			if (c_value[9] != null){
				invokeServletPath = c_value[7];
			}
			if (c_value[10] != null){
				fileDirectory = c_value[8];
			}
		} catch (Exception ex) {
		}

		if(embedtmp == null)
			embedtmp = "/tmp";

		Log.out("Config is {host=" + host + ", db=" + db + ", user=" + user
				+ ", outdir=" + outdir + ", driver=" + driver + ", password=" + password + ", encode=" + encode + ", optimizer=" + optimizer +", embedtmp="+ embedtmp + "}");
		return;
	}

	public static String seek(String key) {
		return (String) envs.get(key);
	}

	public static String getconfigfile() {
		return seek("-c");
	}

	/*
	 * どうやら使っていない
	 */
	public static String getqueryfile() {
		return seek("-q");
	}

	/*
	 * テストデータのファイ?の指? 現在は使用していない
	 */
	public static String gettestdatafile() {
		return seek("-t");
	}

	/**
	 * SuperSQL質問文が格納されているファイル名
	 */
	public static String getfilename() {
		return seek("-f");
	}

	public static String getoutdirectory() {
		String ret = seek("-d");
		if (ret == null) {
			if (outdir != null) {
				ret = outdir;
			}
		}
		if (ret != null) {
			if (ret.startsWith("~/")) {
				ret = ret.substring(1);
				ret = home + ret;
			} else if (ret.startsWith("~")) {
				ret = ret.substring(1);
				String nyoro = home.substring(0,home.indexOf(user));
				ret = nyoro + ret;
			}
		}
		return ret;
	}

	/**
	 * 出力ファイル名
	 */
	public static String getoutfilename() {
		return seek("-o");
	}

	/**
	 * データベースに接続するユーザ名
	 */
	public static String getusername() {
		String ret = seek("-u");
		if (ret == null) {
			ret = user;
		}
		return ret;
	}

	/*
	 * 接続するデータベース 省略された場合ユーザ名と同じとする
	 */
	public static String getdbname() {
		String ret = seek("-db");
		if (ret == null) {
			if (db != null) {
				ret = db;
			} else {
				ret = getusername();
			}
		}
		return ret;
	}

	/*
	 * 接続するDBホスト名
	 */
	public static String gethost() {
		String ret = seek("-h");
		if (ret == null) {
			if (host != null) {
				ret = host;
			} else {
				ret = "postgres.db.ics.keio.ac.jp";
			}
		}
		return ret;
	}

	public static String getdbms() {
		String ret = seek("-driver");
		if (ret == null) {
			if (driver != null) {
				ret = driver;
			} else {
				ret = "postgresql";
			}
		}
		return ret;
	}

	//接続するDBのurl
	public static String geturl() {
		String ret = "jdbc:postgresql://" + host + "/" + db;;
		if (driver != null) {
			if(driver.equals("postgres")){
				ret = "jdbc:postgresql://" + host + "/" + db;
			}else if (driver.equals("mysql")) {
				ret = "jdbc:mysql://" + host + "/" + db + "?useUnicode=true&characterEncoding=SJIS";
			}else if (driver.equals("db2")) {
				ret = "jdbc:db2:" + db;
			}
		} else {
			ret = "jdbc:postgresql://" + host + "/" + db;
		}

		return ret;
	}

	//接続するドライバのパスワード
	public static String getpassword() {
		String ret = seek("-p");
		if (ret == null) {
			if (password != null) {
				ret = password;
			} else {
				ret = "";
			}
		}
		return ret;
	}

	//出力ファイルのencode
	public static String getencode() {
		String ret;
		if (encode != null) {
			ret = encode;
		} else {
			ret = "";
		}
		return ret;
	}


	/*
	 * -debugがあるときだけ，Log.outを出力する
	 */
	public static void setQuietLog() {
		if (seek("-debug") == null) {
			Log.setLog(0);
		} else {
			Log.setLog(1);
		}
		if (seek("-quiet") == null) {
			Log.setinfoLog(1);
		} else {
			Log.setinfoLog(0);
			Log.setLog(0);
		}
	}

	/*
	 * この文字列を質問文とする(-fの代わり)
	 */
	public static String getQuery() {
		return seek("-query");
	}

	//morya start
	public static String getframeworklist() {
		return seek("-fwlist");
	}

	public static String cssout() {
		return seek("-cssout");
	}
	/////////////

	// offline getConfigValue
	protected static String[] getConfigValue(String config) {

		//tk 4 -> 5
		//chie 5->9
		String[] c_value = new String[11];
		BufferedReader filein = null;
		String line = new String();

		//tk added embedtmp
		//chie added driver, optimizer
		//(invokeServletPath and fileDirectory are not used in offline)
		String[] con = { "host", "db", "user", "outdir", "embedtmp","driver", "password", "encode", "optimizer","invokeServletPath","fileDirectory"};

		try {
			filein = new BufferedReader(new FileReader(config));
			while (true) {
				try {
					line = filein.readLine();
				} catch (IOException e1) {
				}
				if (line == null)
					break;
				line = line.trim();
				//tk loop num 4 -> 5
				//chie loop num 5 -> 9
				for (int i = 0; i < 9; i++) {
					if (line.startsWith(con[i])) {
						c_value[i] = line.substring(line.indexOf("=") + 1)
								.trim();
					}
					;
				}
			}
			filein.close();
		} catch (FileNotFoundException e1) {
			Log.out("Configuration file " + config + " not found.");
		} catch (IOException e) {
		}

		return c_value;
	}

	//online getConfigValue
	protected static String[] getConfigValue2(String config) {
		//chie change 5->9
		String[] c_value = new String[11];
		String line = new String();
		//chie added driver,optimizer,invokeServletPath,fileDirectory
		String[] con = { "host", "db", "user", "outdir", "embedtmp","driver", "password", "encode", "optimizer","invokeServletPath","fileDirectory"};
		BufferedReader dis;

		try{
            if(config.startsWith("http:"))
        	{
            URL fileurl = new URL(config);

            URLConnection fileurlConnection = fileurl.openConnection();

            dis = new BufferedReader(new InputStreamReader(fileurlConnection.getInputStream()));
        	}
        	else
        	{
                dis = new BufferedReader(new FileReader(config));
                line = null;
        	}
     			while (true) {
                try {
                	line = dis.readLine();

                	if(line == null)
                		break;
            		//chie change count 5->9
                	for (int i = 0; i < 9; i++) {
                		if (line.startsWith(con[i])) {
							c_value[i] = line.substring(line.indexOf("=") + 1)
									.trim();
                		}
                	}
                } catch (MalformedURLException me) {
                    System.err.println("MalformedURLException: " + me);
                } catch (IOException ioe) {
                    System.err.println("IOException: " + ioe);
                }
     			}
		} catch (MalformedURLException me) {
            System.err.println("MalformedURLException: " + me);
        } catch (IOException ioe) {
            System.err.println("IOException: " + ioe);
        }

		return c_value;
	}
	/**
	 * この文字列を質問文のWHERE節に加える
	 */
	public static String getCondition() {
		return seek("-cond");
	}

	/**
	 * @return
	 */
	public static boolean getForeachFlag() {
		return foreach_flag;
	}

	/**
	 * Imagefile等で，相対パスを記述したときに 付加するディレクトリ
	 */
	public static String getBaseDir() {
		return seek("-basedir");
	}

	/**
	 * cacheLevel
	 */
	public static String getCacheLevel() {
		return seek("-cacheLevel");
	}

	/**
	 * Invokeのサーブレットのpath
	 */
	public static String getInvokeServletPath() {
		String is = seek("-invokeservletpath");

		if (is == null) {
			is = invokeServletPath;
			if(is == null){
				is = "http://www.db.ics.keio.ac.jp/servlet/supersql.invoke.InvokeServlet2";
				//is = "http://localhost:8080/invoke/servlet/supersql.invoke.InvokeServlet2";
			}
		}
		return is;
	}

	//tk///////////////////////////////////////////////////
	public static void addErr(String errMsg)
	{
		err.append(errMsg);
		err_flag = 1;
	}

	public static String getErr()
	{
		return err.toString();
	}
	public static void setOnlineFlag()
	{
		online_flag = 1;
	}
	public static int getOnlineFlag()
	{
		return online_flag;
	}

	public static int getErrFlag()
	{
		return err_flag;
	}

	public static int getEmbedOption() {
		if (seek("-eq") == null)
		{
			//without option
			return 0;
		}else {
			//with option
			return 1;
		}
	}

	public static int isNewEmbed() {

		if(seek("-newEmbed") == null)
		{
			//without option
			return 0;
		}else {
			//with option
			return 1;
		}
	}
	public static boolean isOpt() {
		if(optimizer != null && optimizer.equals("on")){
			//with option
			return true;
		}else{
			//modified by ria 20110912 start
			//if(seek("-optimizer") == null && seek("-O") == null)
			if(seek("-optimizer") == null)
		    //modified by ria 20110912 end
			{
				//without option
				return false;
			}else {
				//with option
				return true;
			}
		}
	}
	public static boolean isMultiThread(){

	if(seek("-mt") == null)
		return false;
	else
		return true;
	}

	public static boolean isAjax(){

		if(seek("-ajax") == null)
			return false;
		else
			return true;
	}

	public static boolean isServlet(){

		if(seek("-servlet") == null && seek("-invokeservletpath") == null && invokeServletPath == null){
			return false;
		}else{
			return true;
		}
	}

	public static String getJsDirectory(){
		return seek("-jsdirectory");
	}

	public static String getAjaxTarget(){
		return seek("-ajaxtarget");
	}

	public static String getEmbedTmp(){
		return embedtmp;
	}

	public static ArrayList getEmbedFile(){
		return EmbedFile;
	}

	public static void addEmbedFile(String file){
		EmbedFile.add(file);
	}

	//chie
	public static String getFileDirectory(){
		if(fileDirectory == null){
			return ".";
		}
		return fileDirectory;
	}

	public static String getDriver(){
		String ret = seek("-driver");
		if (ret == null) {
			if (driver != null) {
				ret = driver;
			} else {
				ret = "postgresql";
			}
		}

		if(ret.equals("postgresql") || ret.equals("postgres")){
			ret = "org.postgresql.Driver";
		} else if(ret.equals("mysql")){
			ret = "com.mysql.jdbc.Driver";
		} else if(ret.equals("db2")){
			ret = "com.ibm.db2.jcc.DB2Driver";
		}
		return ret;
	}

	public static Hashtable getEnv(){
		return envs;
	}
	public static void setEnv(Hashtable env){
		envs = env;
	}

	//set and get number of taples
	public static void setTuplesNum(int num){
		tupleNum = num;
	}

	public static int getTuplesNum(){
		return tupleNum;
	}

	//added by ria 20110628 start
	public static int getOptLevel()
	{
		String s = seek( "-O" );
		if ( s == null )
		{
			return 2;
		}
		else
		{
			return Integer.parseInt( s );
		}
	}

	public static void setOptimizable( boolean b )
	{
		optimizable = b;
	}

	public static boolean isOptimizable()
	{
		return optimizable;
	}
	//added by ria 20110628 end



}